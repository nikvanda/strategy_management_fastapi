services:
  fastapi:
    container_name: strategy_management_fastapi
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    volumes:
      - .:/usr/src/app
    ports:
      - 8080:8080
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
  db:
    image: postgres:alpine
    container_name: db
    environment:
      POSTGRES_DB: stock_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: 111
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $$POSTGRES_DB -U $$POSTGRES_USER" ]
      interval: 10s
      timeout: 5s
      retries: 10
    expose:
      - 5432
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    restart: always

  redis:
    image: redis:7.0.11-alpine
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: always

  rabbitmq:
    image: rabbitmq:3.10.7-management
    container_name: rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M


volumes:
  rabbitmq_data: